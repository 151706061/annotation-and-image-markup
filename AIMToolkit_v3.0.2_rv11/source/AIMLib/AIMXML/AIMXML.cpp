/*
*  Copyright Northwestern University
*
*  Distributed under the OSI-approved BSD 3-Clause License.
*  See http://ncip.github.com/annotation-and-image-markup/LICENSE.txt for details.
*/


////////////////////////////////////////////////////////////////////////
//
// AIMXML.cpp
//
// This file was generated by XMLSpy 2012r2sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include <string.h>
#include "AIMXML.h"
#include <algorithm>


#include "../AltovaXML/XercesString.h"




// turn off warning: "this" used in base initializer list
#pragma warning(disable:4355)


namespace AIMXML
{


xercesc::DOMNode* TypeBase::GetElementNth(const altova::MemberInfo* member, unsigned index)
{
	for (XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
	{
		if (index-- == 0)
			return *it;
	}
	return 0;
}

xercesc::DOMNode* TypeBase::GetElementLast(const altova::MemberInfo* member)
{
	xercesc::DOMNode* p;
	for (XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
	{
		p = *it;
	}
	return p;
}

unsigned TypeBase::CountElement(const altova::MemberInfo* member)
{
	unsigned count = 0;
	for (XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
	{
		++count;
	}
	return count;
}

void TypeBase::RemoveElement(const altova::MemberInfo* member)
{
	XercesTreeOperations::RemoveElements(m_node, member);
}

int TypeBase::GetEnumerationIndex( const string_type sValue, const unsigned enumOffset, const unsigned enumCount)
{
	unsigned enumIndex = enumOffset;

	while( enumIndex < (enumOffset + enumCount) )
	{
		const FacetInfo* facet = GetTableEntry(facets, enumIndex);

		if( facet->StringValue == sValue)
			return enumIndex - enumOffset;
		enumIndex++;
	}
	return -1; //Invalid
}

string_type TypeBase::GetEnumerationValue( const int index, const unsigned enumOffset, const unsigned enumCount)
{
	unsigned enumIndex = enumOffset + index;

	if( enumIndex >= enumOffset && enumIndex < (enumOffset + enumCount) )
	{
		const FacetInfo* facet = GetTableEntry(facets, enumIndex);
		return facet->StringValue;
	}
	else
		throw altova::ConversionException( _T("Enumeration index out of range.") );
}


CAimStatus::CAimStatus(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, annotationVersion(*this)	// "@annotationVersion"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, authorizedBy(*this)	// "@authorizedBy"
{
}

CAimStatus::CAimStatus(CAimStatus const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, annotationVersion(*this)	// "@annotationVersion"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, authorizedBy(*this)	// "@authorizedBy"
{
}

void CAimStatus::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("AimStatus"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAnatomicEntity::CAnatomicEntity(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, isPresent(*this)	// "@isPresent"
, label(*this)	// "@label"
, anatomicEntityCharacteristicCollection(*this)	// "anatomicEntityCharacteristicCollection"
{
}

CAnatomicEntity::CAnatomicEntity(CAnatomicEntity const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, isPresent(*this)	// "@isPresent"
, label(*this)	// "@label"
, anatomicEntityCharacteristicCollection(*this)	// "anatomicEntityCharacteristicCollection"
{
}

void CAnatomicEntity::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("AnatomicEntity"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAnatomicEntityCharacteristic::CAnatomicEntityCharacteristic(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, label(*this)	// "@label"
, characteristicQuantificationCollection(*this)	// "characteristicQuantificationCollection"
{
}

CAnatomicEntityCharacteristic::CAnatomicEntityCharacteristic(CAnatomicEntityCharacteristic const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, label(*this)	// "@label"
, characteristicQuantificationCollection(*this)	// "characteristicQuantificationCollection"
{
}

void CAnatomicEntityCharacteristic::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("AnatomicEntityCharacteristic"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAnnotation::CAnnotation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, aimVersion(*this)	// "@aimVersion"
, comment(*this)	// "@comment"
, dateTime(*this)	// "@dateTime"
, name(*this)	// "@name"
, uniqueIdentifier(*this)	// "@uniqueIdentifier"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, precedentReferencedAnnotationUID(*this)	// "@precedentReferencedAnnotationUID"
, calculationCollection(*this)	// "calculationCollection"
, inferenceCollection(*this)	// "inferenceCollection"
, user(*this)	// "user"
, equipment(*this)	// "equipment"
, anatomicEntityCollection(*this)	// "anatomicEntityCollection"
, imagingObservationCollection(*this)	// "imagingObservationCollection"
, aimStatus(*this)	// "aimStatus"
{
}

CAnnotation::CAnnotation(CAnnotation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, aimVersion(*this)	// "@aimVersion"
, comment(*this)	// "@comment"
, dateTime(*this)	// "@dateTime"
, name(*this)	// "@name"
, uniqueIdentifier(*this)	// "@uniqueIdentifier"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, precedentReferencedAnnotationUID(*this)	// "@precedentReferencedAnnotationUID"
, calculationCollection(*this)	// "calculationCollection"
, inferenceCollection(*this)	// "inferenceCollection"
, user(*this)	// "user"
, equipment(*this)	// "equipment"
, anatomicEntityCollection(*this)	// "anatomicEntityCollection"
, imagingObservationCollection(*this)	// "imagingObservationCollection"
, aimStatus(*this)	// "aimStatus"
{
}

void CAnnotation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Annotation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAnnotationOfAnnotation::CAnnotationOfAnnotation(xercesc::DOMNode* const& node)
: ::AIMXML::CAnnotation(node)
, referencedAnnotationCollection(*this)	// "referencedAnnotationCollection"
{
}

CAnnotationOfAnnotation::CAnnotationOfAnnotation(CAnnotationOfAnnotation const& other)
: ::AIMXML::CAnnotation(other.GetNode())
, referencedAnnotationCollection(*this)	// "referencedAnnotationCollection"
{
}

void CAnnotationOfAnnotation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("AnnotationOfAnnotation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAnnotationRole::CAnnotationRole(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, roleSequenceNumber(*this)	// "@roleSequenceNumber"
{
}

CAnnotationRole::CAnnotationRole(CAnnotationRole const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, roleSequenceNumber(*this)	// "@roleSequenceNumber"
{
}

void CAnnotationRole::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("AnnotationRole"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CCalculation::CCalculation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, uid(*this)	// "@uid"
, description(*this)	// "@description"
, mathML(*this)	// "@mathML"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, algorithmName(*this)	// "@algorithmName"
, algorithmVersion(*this)	// "@algorithmVersion"
, referencedCalculationCollection(*this)	// "referencedCalculationCollection"
, calculationResultCollection(*this)	// "calculationResultCollection"
, referencedGeometricShapeCollection(*this)	// "referencedGeometricShapeCollection"
{
}

CCalculation::CCalculation(CCalculation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, uid(*this)	// "@uid"
, description(*this)	// "@description"
, mathML(*this)	// "@mathML"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, algorithmName(*this)	// "@algorithmName"
, algorithmVersion(*this)	// "@algorithmVersion"
, referencedCalculationCollection(*this)	// "referencedCalculationCollection"
, calculationResultCollection(*this)	// "calculationResultCollection"
, referencedGeometricShapeCollection(*this)	// "referencedGeometricShapeCollection"
{
}

void CCalculation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Calculation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CCalculationData::CCalculationData(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, dataValue(*this)	// "@value"
, coordinateCollection(*this)	// "coordinateCollection"
{
}

CCalculationData::CCalculationData(CCalculationData const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, dataValue(*this)	// "@value"
, coordinateCollection(*this)	// "coordinateCollection"
{
}

void CCalculationData::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("CalculationData"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CCalculationResult::CCalculationResult(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, type(*this)	// "@type"
, numberOfDimensions(*this)	// "@numberOfDimensions"
, unitOfMeasure(*this)	// "@unitOfMeasure"
, calculationDataCollection(*this)	// "calculationDataCollection"
, dimensionCollection(*this)	// "dimensionCollection"
{
}

CCalculationResult::CCalculationResult(CCalculationResult const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, type(*this)	// "@type"
, numberOfDimensions(*this)	// "@numberOfDimensions"
, unitOfMeasure(*this)	// "@unitOfMeasure"
, calculationDataCollection(*this)	// "calculationDataCollection"
, dimensionCollection(*this)	// "dimensionCollection"
{
}

void CCalculationResult::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("CalculationResult"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CCalculationResultIdentifier::CCalculationResultIdentifier(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CCalculationResultIdentifier::CCalculationResultIdentifier(CCalculationResultIdentifier const& other)
: TypeBase(other.GetNode())
{
}


CCharacteristicQuantification::CCharacteristicQuantification(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, name(*this)	// "@name"
, annotatorConfidence(*this)	// "@annotatorConfidence"
{
}

CCharacteristicQuantification::CCharacteristicQuantification(CCharacteristicQuantification const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, name(*this)	// "@name"
, annotatorConfidence(*this)	// "@annotatorConfidence"
{
}

void CCharacteristicQuantification::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("CharacteristicQuantification"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CCircle::CCircle(xercesc::DOMNode* const& node)
: ::AIMXML::CGeometricShape(node)
{
}

CCircle::CCircle(CCircle const& other)
: ::AIMXML::CGeometricShape(other.GetNode())
{
}

void CCircle::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Circle"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CComparisonOperators::CComparisonOperators(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CComparisonOperators::CComparisonOperators(CComparisonOperators const& other)
: TypeBase(other.GetNode())
{
}


CCoordinate::CCoordinate(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, dimensionIndex(*this)	// "@dimensionIndex"
, position(*this)	// "@position"
{
}

CCoordinate::CCoordinate(CCoordinate const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, dimensionIndex(*this)	// "@dimensionIndex"
, position(*this)	// "@position"
{
}

void CCoordinate::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Coordinate"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CDICOMImageReference::CDICOMImageReference(xercesc::DOMNode* const& node)
: ::AIMXML::CImageReference(node)
, imageStudy(*this)	// "imageStudy"
, presentationStateCollection(*this)	// "presentationStateCollection"
{
}

CDICOMImageReference::CDICOMImageReference(CDICOMImageReference const& other)
: ::AIMXML::CImageReference(other.GetNode())
, imageStudy(*this)	// "imageStudy"
, presentationStateCollection(*this)	// "presentationStateCollection"
{
}

void CDICOMImageReference::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("DICOMImageReference"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CDimension::CDimension(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, index(*this)	// "@index"
, size(*this)	// "@size"
, label(*this)	// "@label"
{
}

CDimension::CDimension(CDimension const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, index(*this)	// "@index"
, size(*this)	// "@size"
, label(*this)	// "@label"
{
}

void CDimension::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Dimension"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CEllipse::CEllipse(xercesc::DOMNode* const& node)
: ::AIMXML::CGeometricShape(node)
{
}

CEllipse::CEllipse(CEllipse const& other)
: ::AIMXML::CGeometricShape(other.GetNode())
{
}

void CEllipse::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Ellipse"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CEquipment::CEquipment(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, manufacturerName(*this)	// "@manufacturerName"
, manufacturerModelName(*this)	// "@manufacturerModelName"
, softwareVersion(*this)	// "@softwareVersion"
{
}

CEquipment::CEquipment(CEquipment const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, manufacturerName(*this)	// "@manufacturerName"
, manufacturerModelName(*this)	// "@manufacturerModelName"
, softwareVersion(*this)	// "@softwareVersion"
{
}

void CEquipment::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Equipment"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CGeometricShape::CGeometricShape(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, lineColor(*this)	// "@lineColor"
, lineOpacity(*this)	// "@lineOpacity"
, lineStyle(*this)	// "@lineStyle"
, lineThickness(*this)	// "@lineThickness"
, includeFlag(*this)	// "@includeFlag"
, shapeIdentifier(*this)	// "@shapeIdentifier"
, spatialCoordinateCollection(*this)	// "spatialCoordinateCollection"
{
}

CGeometricShape::CGeometricShape(CGeometricShape const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, lineColor(*this)	// "@lineColor"
, lineOpacity(*this)	// "@lineOpacity"
, lineStyle(*this)	// "@lineStyle"
, lineThickness(*this)	// "@lineThickness"
, includeFlag(*this)	// "@includeFlag"
, shapeIdentifier(*this)	// "@shapeIdentifier"
, spatialCoordinateCollection(*this)	// "spatialCoordinateCollection"
{
}

void CGeometricShape::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("GeometricShape"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImage::CImage(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, sopClassUID(*this)	// "@sopClassUID"
, sopInstanceUID(*this)	// "@sopInstanceUID"
{
}

CImage::CImage(CImage const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, sopClassUID(*this)	// "@sopClassUID"
, sopInstanceUID(*this)	// "@sopInstanceUID"
{
}

void CImage::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Image"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImageAnnotation::CImageAnnotation(xercesc::DOMNode* const& node)
: ::AIMXML::CAnnotation(node)
, segmentationCollection(*this)	// "segmentationCollection"
, imageReferenceCollection(*this)	// "imageReferenceCollection"
, geometricShapeCollection(*this)	// "geometricShapeCollection"
, person(*this)	// "person"
, textAnnotationCollection(*this)	// "textAnnotationCollection"
{
}

CImageAnnotation::CImageAnnotation(CImageAnnotation const& other)
: ::AIMXML::CAnnotation(other.GetNode())
, segmentationCollection(*this)	// "segmentationCollection"
, imageReferenceCollection(*this)	// "imageReferenceCollection"
, geometricShapeCollection(*this)	// "geometricShapeCollection"
, person(*this)	// "person"
, textAnnotationCollection(*this)	// "textAnnotationCollection"
{
}

void CImageAnnotation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ImageAnnotation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImageReference::CImageReference(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
{
}

CImageReference::CImageReference(CImageReference const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
{
}

void CImageReference::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ImageReference"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImageSeries::CImageSeries(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, instanceUID(*this)	// "@instanceUID"
, imageCollection(*this)	// "imageCollection"
{
}

CImageSeries::CImageSeries(CImageSeries const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, instanceUID(*this)	// "@instanceUID"
, imageCollection(*this)	// "imageCollection"
{
}

void CImageSeries::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ImageSeries"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImageStudy::CImageStudy(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, instanceUID(*this)	// "@instanceUID"
, startDate(*this)	// "@startDate"
, startTime(*this)	// "@startTime"
, imageSeries(*this)	// "imageSeries"
{
}

CImageStudy::CImageStudy(CImageStudy const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, instanceUID(*this)	// "@instanceUID"
, startDate(*this)	// "@startDate"
, startTime(*this)	// "@startTime"
, imageSeries(*this)	// "imageSeries"
{
}

void CImageStudy::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ImageStudy"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImagingObservation::CImagingObservation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, comment(*this)	// "@comment"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, isPresent(*this)	// "@isPresent"
, label(*this)	// "@label"
, imagingObservationCharacteristicCollection(*this)	// "imagingObservationCharacteristicCollection"
, referencedGeometricShape(*this)	// "referencedGeometricShape"
{
}

CImagingObservation::CImagingObservation(CImagingObservation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, comment(*this)	// "@comment"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, isPresent(*this)	// "@isPresent"
, label(*this)	// "@label"
, imagingObservationCharacteristicCollection(*this)	// "imagingObservationCharacteristicCollection"
, referencedGeometricShape(*this)	// "referencedGeometricShape"
{
}

void CImagingObservation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ImagingObservation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CImagingObservationCharacteristic::CImagingObservationCharacteristic(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, comment(*this)	// "@comment"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, label(*this)	// "@label"
, characteristicQuantificationCollection(*this)	// "characteristicQuantificationCollection"
{
}

CImagingObservationCharacteristic::CImagingObservationCharacteristic(CImagingObservationCharacteristic const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, comment(*this)	// "@comment"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, label(*this)	// "@label"
, characteristicQuantificationCollection(*this)	// "characteristicQuantificationCollection"
{
}

void CImagingObservationCharacteristic::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ImagingObservationCharacteristic"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CInference::CInference(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, imageEvidence(*this)	// "@imageEvidence"
{
}

CInference::CInference(CInference const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
, annotatorConfidence(*this)	// "@annotatorConfidence"
, imageEvidence(*this)	// "@imageEvidence"
{
}

void CInference::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Inference"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CInterval::CInterval(xercesc::DOMNode* const& node)
: ::AIMXML::CCharacteristicQuantification(node)
, minValue(*this)	// "@minValue"
, maxValue(*this)	// "@maxValue"
, minOperator(*this)	// "@minOperator"
, ucumString(*this)	// "@ucumString"
, maxOperator(*this)	// "@maxOperator"
{
}

CInterval::CInterval(CInterval const& other)
: ::AIMXML::CCharacteristicQuantification(other.GetNode())
, minValue(*this)	// "@minValue"
, maxValue(*this)	// "@maxValue"
, minOperator(*this)	// "@minOperator"
, ucumString(*this)	// "@ucumString"
, maxOperator(*this)	// "@maxOperator"
{
}

void CInterval::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Interval"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CMultiPoint::CMultiPoint(xercesc::DOMNode* const& node)
: ::AIMXML::CGeometricShape(node)
{
}

CMultiPoint::CMultiPoint(CMultiPoint const& other)
: ::AIMXML::CGeometricShape(other.GetNode())
{
}

void CMultiPoint::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("MultiPoint"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CNonQuantifiable::CNonQuantifiable(xercesc::DOMNode* const& node)
: ::AIMXML::CCharacteristicQuantification(node)
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
{
}

CNonQuantifiable::CNonQuantifiable(CNonQuantifiable const& other)
: ::AIMXML::CCharacteristicQuantification(other.GetNode())
, codeValue(*this)	// "@codeValue"
, codeMeaning(*this)	// "@codeMeaning"
, codingSchemeDesignator(*this)	// "@codingSchemeDesignator"
, codingSchemeVersion(*this)	// "@codingSchemeVersion"
{
}

void CNonQuantifiable::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("NonQuantifiable"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CNumerical::CNumerical(xercesc::DOMNode* const& node)
: ::AIMXML::CCharacteristicQuantification(node)
, ucumString(*this)	// "@ucumString"
, numericalValue(*this)	// "@value"
, numericalOperator(*this)	// "@operator"
{
}

CNumerical::CNumerical(CNumerical const& other)
: ::AIMXML::CCharacteristicQuantification(other.GetNode())
, ucumString(*this)	// "@ucumString"
, numericalValue(*this)	// "@value"
, numericalOperator(*this)	// "@operator"
{
}

void CNumerical::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Numerical"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CPerson::CPerson(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, name(*this)	// "@name"
, id(*this)	// "@id"
, birthDate(*this)	// "@birthDate"
, sex(*this)	// "@sex"
, ethnicGroup(*this)	// "@ethnicGroup"
{
}

CPerson::CPerson(CPerson const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, name(*this)	// "@name"
, id(*this)	// "@id"
, birthDate(*this)	// "@birthDate"
, sex(*this)	// "@sex"
, ethnicGroup(*this)	// "@ethnicGroup"
{
}

void CPerson::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Person"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CPoint::CPoint(xercesc::DOMNode* const& node)
: ::AIMXML::CGeometricShape(node)
{
}

CPoint::CPoint(CPoint const& other)
: ::AIMXML::CGeometricShape(other.GetNode())
{
}

void CPoint::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Point"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CPolyline::CPolyline(xercesc::DOMNode* const& node)
: ::AIMXML::CGeometricShape(node)
{
}

CPolyline::CPolyline(CPolyline const& other)
: ::AIMXML::CGeometricShape(other.GetNode())
{
}

void CPolyline::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Polyline"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CPresentationState::CPresentationState(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, sopInstanceUID(*this)	// "@sopInstanceUID"
{
}

CPresentationState::CPresentationState(CPresentationState const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, sopInstanceUID(*this)	// "@sopInstanceUID"
{
}

void CPresentationState::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("PresentationState"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CQuantile::CQuantile(xercesc::DOMNode* const& node)
: ::AIMXML::CCharacteristicQuantification(node)
, bin(*this)	// "@bin"
{
}

CQuantile::CQuantile(CQuantile const& other)
: ::AIMXML::CCharacteristicQuantification(other.GetNode())
, bin(*this)	// "@bin"
{
}

void CQuantile::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Quantile"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CReferencedAnnotation::CReferencedAnnotation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, referencedAnnotationUID(*this)	// "@referencedAnnotationUID"
, annotationRole(*this)	// "annotationRole"
{
}

CReferencedAnnotation::CReferencedAnnotation(CReferencedAnnotation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, referencedAnnotationUID(*this)	// "@referencedAnnotationUID"
, annotationRole(*this)	// "annotationRole"
{
}

void CReferencedAnnotation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ReferencedAnnotation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CReferencedCalculation::CReferencedCalculation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, uniqueIdentifier(*this)	// "@uniqueIdentifier"
{
}

CReferencedCalculation::CReferencedCalculation(CReferencedCalculation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, uniqueIdentifier(*this)	// "@uniqueIdentifier"
{
}

void CReferencedCalculation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ReferencedCalculation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CReferencedGeometricShape::CReferencedGeometricShape(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, referencedShapeIdentifier(*this)	// "@referencedShapeIdentifier"
{
}

CReferencedGeometricShape::CReferencedGeometricShape(CReferencedGeometricShape const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, referencedShapeIdentifier(*this)	// "@referencedShapeIdentifier"
{
}

void CReferencedGeometricShape::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ReferencedGeometricShape"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CScale::CScale(xercesc::DOMNode* const& node)
: ::AIMXML::CCharacteristicQuantification(node)
, comment(*this)	// "@comment"
, description(*this)	// "@description"
, scaleValue(*this)	// "@value"
{
}

CScale::CScale(CScale const& other)
: ::AIMXML::CCharacteristicQuantification(other.GetNode())
, comment(*this)	// "@comment"
, description(*this)	// "@description"
, scaleValue(*this)	// "@value"
{
}

void CScale::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Scale"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CSegmentation::CSegmentation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, sopInstanceUID(*this)	// "@sopInstanceUID"
, sopClassUID(*this)	// "@sopClassUID"
, referencedSopInstanceUID(*this)	// "@referencedSopInstanceUID"
, segmentNumber(*this)	// "@segmentNumber"
, imagingObservation(*this)	// "imagingObservation"
{
}

CSegmentation::CSegmentation(CSegmentation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, sopInstanceUID(*this)	// "@sopInstanceUID"
, sopClassUID(*this)	// "@sopClassUID"
, referencedSopInstanceUID(*this)	// "@referencedSopInstanceUID"
, segmentNumber(*this)	// "@segmentNumber"
, imagingObservation(*this)	// "imagingObservation"
{
}

void CSegmentation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("Segmentation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CSpatialCoordinate::CSpatialCoordinate(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, coordinateIndex(*this)	// "@coordinateIndex"
{
}

CSpatialCoordinate::CSpatialCoordinate(CSpatialCoordinate const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, coordinateIndex(*this)	// "@coordinateIndex"
{
}

void CSpatialCoordinate::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("SpatialCoordinate"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CTextAnnotation::CTextAnnotation(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, font(*this)	// "@font"
, fontColor(*this)	// "@fontColor"
, fontEffect(*this)	// "@fontEffect"
, fontSize(*this)	// "@fontSize"
, fontStyle(*this)	// "@fontStyle"
, text(*this)	// "@text"
, textJustify(*this)	// "@textJustify"
, fontOpacity(*this)	// "@fontOpacity"
, multiPoint(*this)	// "multiPoint"
{
}

CTextAnnotation::CTextAnnotation(CTextAnnotation const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, font(*this)	// "@font"
, fontColor(*this)	// "@fontColor"
, fontEffect(*this)	// "@fontEffect"
, fontSize(*this)	// "@fontSize"
, fontStyle(*this)	// "@fontStyle"
, text(*this)	// "@text"
, textJustify(*this)	// "@textJustify"
, fontOpacity(*this)	// "@fontOpacity"
, multiPoint(*this)	// "multiPoint"
{
}

void CTextAnnotation::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("TextAnnotation"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CThreeDimensionSpatialCoordinate::CThreeDimensionSpatialCoordinate(xercesc::DOMNode* const& node)
: ::AIMXML::CSpatialCoordinate(node)
, x(*this)	// "@x"
, y(*this)	// "@y"
, z(*this)	// "@z"
, frameOfReferenceUID(*this)	// "@frameOfReferenceUID"
{
}

CThreeDimensionSpatialCoordinate::CThreeDimensionSpatialCoordinate(CThreeDimensionSpatialCoordinate const& other)
: ::AIMXML::CSpatialCoordinate(other.GetNode())
, x(*this)	// "@x"
, y(*this)	// "@y"
, z(*this)	// "@z"
, frameOfReferenceUID(*this)	// "@frameOfReferenceUID"
{
}

void CThreeDimensionSpatialCoordinate::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("ThreeDimensionSpatialCoordinate"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CTwoDimensionSpatialCoordinate::CTwoDimensionSpatialCoordinate(xercesc::DOMNode* const& node)
: ::AIMXML::CSpatialCoordinate(node)
, imageReferenceUID(*this)	// "@imageReferenceUID"
, referencedFrameNumber(*this)	// "@referencedFrameNumber"
, x(*this)	// "@x"
, y(*this)	// "@y"
{
}

CTwoDimensionSpatialCoordinate::CTwoDimensionSpatialCoordinate(CTwoDimensionSpatialCoordinate const& other)
: ::AIMXML::CSpatialCoordinate(other.GetNode())
, imageReferenceUID(*this)	// "@imageReferenceUID"
, referencedFrameNumber(*this)	// "@referencedFrameNumber"
, x(*this)	// "@x"
, y(*this)	// "@y"
{
}

void CTwoDimensionSpatialCoordinate::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("TwoDimensionSpatialCoordinate"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CUser::CUser(xercesc::DOMNode* const& node)
: TypeBase(node)
, cagridId(*this)	// "@cagridId"
, name(*this)	// "@name"
, loginName(*this)	// "@loginName"
, roleInTrial(*this)	// "@roleInTrial"
, numberWithinRoleOfClinicalTrial(*this)	// "@numberWithinRoleOfClinicalTrial"
{
}

CUser::CUser(CUser const& other)
: TypeBase(other.GetNode())
, cagridId(*this)	// "@cagridId"
, name(*this)	// "@name"
, loginName(*this)	// "@loginName"
, roleInTrial(*this)	// "@roleInTrial"
, numberWithinRoleOfClinicalTrial(*this)	// "@numberWithinRoleOfClinicalTrial"
{
}

void CUser::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("User"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CWebImageReference::CWebImageReference(xercesc::DOMNode* const& node)
: ::AIMXML::CImageReference(node)
, uri(*this)	// "@uri"
{
}

CWebImageReference::CWebImageReference(CWebImageReference const& other)
: ::AIMXML::CImageReference(other.GetNode())
, uri(*this)	// "@uri"
{
}

void CWebImageReference::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("WebImageReference"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAIMXML::CAIMXML(xercesc::DOMNode* const& node)
: TypeBase(node)
, AnnotationOfAnnotation(*this)	// "AnnotationOfAnnotation"
, ImageAnnotation(*this)	// "ImageAnnotation"
{
}

CAIMXML::CAIMXML(CAIMXML const& other)
: TypeBase(other.GetNode())
, AnnotationOfAnnotation(*this)	// "AnnotationOfAnnotation"
, ImageAnnotation(*this)	// "ImageAnnotation"
{
}

void CAIMXML::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("AIMXML"), _T("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM"));
}

CAIMXML CAIMXML::LoadFromFile(const string_type& fileName)
{
	return CAIMXML(XercesTreeOperations::LoadDocument(fileName));
}

CAIMXML CAIMXML::LoadFromString(const string_type& text)
{
	return CAIMXML(XercesTreeOperations::LoadXml(text));
}

void CAIMXML::SaveToFile(const string_type& fileName, bool prettyPrint)
{
	XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, _T("UTF-8"), false, false);
}

void CAIMXML::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding)
{
	std::vector<unsigned char> result;
    string_type sTmpEnc( encoding);
    std::transform( sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
	XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0);
}

void CAIMXML::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
	XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, bBigEndian, bBOM);
}

string_type CAIMXML::SaveToString(bool prettyPrint)
{
	return XercesTreeOperations::SaveXml(GetDocumentNode(), prettyPrint);
}

CAIMXML CAIMXML::CreateDocument()
{
	return XercesTreeOperations::CreateDocument();
}

void CAIMXML::DestroyDocument()
{
	XercesTreeOperations::DocumentType doc = GetDocumentNode();
	XercesTreeOperations::FreeDocument(doc);
	m_node = 0;
}

void CAIMXML::SetDTDLocation(const string_type& dtdLocation)
{

	xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
	xercesc::DOMDocumentType* doctype = document->getDoctype();
	if (doctype != 0)
	{
		document->removeChild(doctype);
	}

	xercesc::DOMElement* rootElement = document->getDocumentElement();
	if (rootElement == 0)
		throw altova::InvalidOperationException(_T("You have to add a root element before setting DTD location."));

	doctype = document->createDocumentType(rootElement->getNodeName(), XercesStringTemp(_T("")), XercesStringTemp(dtdLocation));
	document->insertBefore(doctype, rootElement);

}

void CAIMXML::SetSchemaLocation(const string_type& schemaLocation)
{

	xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
	xercesc::DOMElement* rootElement = document->getDocumentElement();
	if (rootElement == 0)
		throw altova::InvalidOperationException(_T("You have to add a root element before setting schema location."));

	string_type namespaceURI = XercesUnstringTemp(rootElement->getNamespaceURI());


	if (namespaceURI.empty())
		XercesTreeOperations::SetAttribute(rootElement, _T("xsi:noNamespaceSchemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), schemaLocation);
	else
		XercesTreeOperations::SetAttribute(rootElement, _T("xsi:schemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), namespaceURI + _T(" ") + schemaLocation);

}

CAIMXML CAIMXML::LoadFromBinary(const std::vector<unsigned char>& data)
{
	return XercesTreeOperations::LoadFromBinary(data);
}

std::vector<unsigned char> CAIMXML::SaveToBinary(bool prettyPrint)
{
	return XercesTreeOperations::SaveToBinary((XercesTreeOperations::DocumentType)GetNode(), prettyPrint);
}

std::vector<unsigned char> CAIMXML::SaveToBinary(bool prettyPrint, const string_type& encoding)
{
	std::vector<unsigned char> result;
    string_type sTmpEnc( encoding);
    std::transform( sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
	XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0);
	return result;
}

std::vector<unsigned char> CAIMXML::SaveToBinary(bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
	std::vector<unsigned char> result;
	XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, bBigEndian, bBOM);
	return result;
}




CanatomicEntityCharacteristicCollectionType::CanatomicEntityCharacteristicCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, AnatomicEntityCharacteristic(*this)	// "AnatomicEntityCharacteristic"
{
}

CanatomicEntityCharacteristicCollectionType::CanatomicEntityCharacteristicCollectionType(CanatomicEntityCharacteristicCollectionType const& other)
: TypeBase(other.GetNode())
, AnatomicEntityCharacteristic(*this)	// "AnatomicEntityCharacteristic"
{
}


CcharacteristicQuantificationCollectionType::CcharacteristicQuantificationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, CharacteristicQuantification(*this)	// "CharacteristicQuantification"
{
}

CcharacteristicQuantificationCollectionType::CcharacteristicQuantificationCollectionType(CcharacteristicQuantificationCollectionType const& other)
: TypeBase(other.GetNode())
, CharacteristicQuantification(*this)	// "CharacteristicQuantification"
{
}


CcalculationCollectionType::CcalculationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Calculation(*this)	// "Calculation"
{
}

CcalculationCollectionType::CcalculationCollectionType(CcalculationCollectionType const& other)
: TypeBase(other.GetNode())
, Calculation(*this)	// "Calculation"
{
}


CinferenceCollectionType::CinferenceCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Inference(*this)	// "Inference"
{
}

CinferenceCollectionType::CinferenceCollectionType(CinferenceCollectionType const& other)
: TypeBase(other.GetNode())
, Inference(*this)	// "Inference"
{
}


CuserType::CuserType(xercesc::DOMNode* const& node)
: TypeBase(node)
, User(*this)	// "User"
{
}

CuserType::CuserType(CuserType const& other)
: TypeBase(other.GetNode())
, User(*this)	// "User"
{
}


CequipmentType::CequipmentType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Equipment(*this)	// "Equipment"
{
}

CequipmentType::CequipmentType(CequipmentType const& other)
: TypeBase(other.GetNode())
, Equipment(*this)	// "Equipment"
{
}


CanatomicEntityCollectionType::CanatomicEntityCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, AnatomicEntity(*this)	// "AnatomicEntity"
{
}

CanatomicEntityCollectionType::CanatomicEntityCollectionType(CanatomicEntityCollectionType const& other)
: TypeBase(other.GetNode())
, AnatomicEntity(*this)	// "AnatomicEntity"
{
}


CimagingObservationCollectionType::CimagingObservationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ImagingObservation(*this)	// "ImagingObservation"
{
}

CimagingObservationCollectionType::CimagingObservationCollectionType(CimagingObservationCollectionType const& other)
: TypeBase(other.GetNode())
, ImagingObservation(*this)	// "ImagingObservation"
{
}


CaimStatusType::CaimStatusType(xercesc::DOMNode* const& node)
: TypeBase(node)
, AimStatus(*this)	// "AimStatus"
{
}

CaimStatusType::CaimStatusType(CaimStatusType const& other)
: TypeBase(other.GetNode())
, AimStatus(*this)	// "AimStatus"
{
}


CreferencedAnnotationCollectionType::CreferencedAnnotationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ReferencedAnnotation(*this)	// "ReferencedAnnotation"
{
}

CreferencedAnnotationCollectionType::CreferencedAnnotationCollectionType(CreferencedAnnotationCollectionType const& other)
: TypeBase(other.GetNode())
, ReferencedAnnotation(*this)	// "ReferencedAnnotation"
{
}


CreferencedCalculationCollectionType::CreferencedCalculationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ReferencedCalculation(*this)	// "ReferencedCalculation"
{
}

CreferencedCalculationCollectionType::CreferencedCalculationCollectionType(CreferencedCalculationCollectionType const& other)
: TypeBase(other.GetNode())
, ReferencedCalculation(*this)	// "ReferencedCalculation"
{
}


CcalculationResultCollectionType::CcalculationResultCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, CalculationResult(*this)	// "CalculationResult"
{
}

CcalculationResultCollectionType::CcalculationResultCollectionType(CcalculationResultCollectionType const& other)
: TypeBase(other.GetNode())
, CalculationResult(*this)	// "CalculationResult"
{
}


CreferencedGeometricShapeCollectionType::CreferencedGeometricShapeCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ReferencedGeometricShape(*this)	// "ReferencedGeometricShape"
{
}

CreferencedGeometricShapeCollectionType::CreferencedGeometricShapeCollectionType(CreferencedGeometricShapeCollectionType const& other)
: TypeBase(other.GetNode())
, ReferencedGeometricShape(*this)	// "ReferencedGeometricShape"
{
}


CcoordinateCollectionType::CcoordinateCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Coordinate(*this)	// "Coordinate"
{
}

CcoordinateCollectionType::CcoordinateCollectionType(CcoordinateCollectionType const& other)
: TypeBase(other.GetNode())
, Coordinate(*this)	// "Coordinate"
{
}


CcalculationDataCollectionType::CcalculationDataCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, CalculationData(*this)	// "CalculationData"
{
}

CcalculationDataCollectionType::CcalculationDataCollectionType(CcalculationDataCollectionType const& other)
: TypeBase(other.GetNode())
, CalculationData(*this)	// "CalculationData"
{
}


CdimensionCollectionType::CdimensionCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Dimension(*this)	// "Dimension"
{
}

CdimensionCollectionType::CdimensionCollectionType(CdimensionCollectionType const& other)
: TypeBase(other.GetNode())
, Dimension(*this)	// "Dimension"
{
}


CspatialCoordinateCollectionType::CspatialCoordinateCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, SpatialCoordinate(*this)	// "SpatialCoordinate"
{
}

CspatialCoordinateCollectionType::CspatialCoordinateCollectionType(CspatialCoordinateCollectionType const& other)
: TypeBase(other.GetNode())
, SpatialCoordinate(*this)	// "SpatialCoordinate"
{
}


CimageStudyType::CimageStudyType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ImageStudy(*this)	// "ImageStudy"
{
}

CimageStudyType::CimageStudyType(CimageStudyType const& other)
: TypeBase(other.GetNode())
, ImageStudy(*this)	// "ImageStudy"
{
}


CpresentationStateCollectionType::CpresentationStateCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, PresentationState(*this)	// "PresentationState"
{
}

CpresentationStateCollectionType::CpresentationStateCollectionType(CpresentationStateCollectionType const& other)
: TypeBase(other.GetNode())
, PresentationState(*this)	// "PresentationState"
{
}


CsegmentationCollectionType::CsegmentationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Segmentation(*this)	// "Segmentation"
{
}

CsegmentationCollectionType::CsegmentationCollectionType(CsegmentationCollectionType const& other)
: TypeBase(other.GetNode())
, Segmentation(*this)	// "Segmentation"
{
}


CimageReferenceCollectionType::CimageReferenceCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ImageReference(*this)	// "ImageReference"
{
}

CimageReferenceCollectionType::CimageReferenceCollectionType(CimageReferenceCollectionType const& other)
: TypeBase(other.GetNode())
, ImageReference(*this)	// "ImageReference"
{
}


CgeometricShapeCollectionType::CgeometricShapeCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, GeometricShape(*this)	// "GeometricShape"
{
}

CgeometricShapeCollectionType::CgeometricShapeCollectionType(CgeometricShapeCollectionType const& other)
: TypeBase(other.GetNode())
, GeometricShape(*this)	// "GeometricShape"
{
}


CpersonType::CpersonType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Person(*this)	// "Person"
{
}

CpersonType::CpersonType(CpersonType const& other)
: TypeBase(other.GetNode())
, Person(*this)	// "Person"
{
}


CtextAnnotationCollectionType::CtextAnnotationCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, TextAnnotation(*this)	// "TextAnnotation"
{
}

CtextAnnotationCollectionType::CtextAnnotationCollectionType(CtextAnnotationCollectionType const& other)
: TypeBase(other.GetNode())
, TextAnnotation(*this)	// "TextAnnotation"
{
}


CimageCollectionType::CimageCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, Image(*this)	// "Image"
{
}

CimageCollectionType::CimageCollectionType(CimageCollectionType const& other)
: TypeBase(other.GetNode())
, Image(*this)	// "Image"
{
}


CimageSeriesType::CimageSeriesType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ImageSeries(*this)	// "ImageSeries"
{
}

CimageSeriesType::CimageSeriesType(CimageSeriesType const& other)
: TypeBase(other.GetNode())
, ImageSeries(*this)	// "ImageSeries"
{
}


CimagingObservationCharacteristicCollectionType::CimagingObservationCharacteristicCollectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ImagingObservationCharacteristic(*this)	// "ImagingObservationCharacteristic"
{
}

CimagingObservationCharacteristicCollectionType::CimagingObservationCharacteristicCollectionType(CimagingObservationCharacteristicCollectionType const& other)
: TypeBase(other.GetNode())
, ImagingObservationCharacteristic(*this)	// "ImagingObservationCharacteristic"
{
}


CreferencedGeometricShapeType::CreferencedGeometricShapeType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ReferencedGeometricShape(*this)	// "ReferencedGeometricShape"
{
}

CreferencedGeometricShapeType::CreferencedGeometricShapeType(CreferencedGeometricShapeType const& other)
: TypeBase(other.GetNode())
, ReferencedGeometricShape(*this)	// "ReferencedGeometricShape"
{
}


CcharacteristicQuantificationCollectionType2::CcharacteristicQuantificationCollectionType2(xercesc::DOMNode* const& node)
: TypeBase(node)
, CharacteristicQuantification(*this)	// "CharacteristicQuantification"
{
}

CcharacteristicQuantificationCollectionType2::CcharacteristicQuantificationCollectionType2(CcharacteristicQuantificationCollectionType2 const& other)
: TypeBase(other.GetNode())
, CharacteristicQuantification(*this)	// "CharacteristicQuantification"
{
}


CannotationRoleType::CannotationRoleType(xercesc::DOMNode* const& node)
: TypeBase(node)
, AnnotationRole(*this)	// "AnnotationRole"
{
}

CannotationRoleType::CannotationRoleType(CannotationRoleType const& other)
: TypeBase(other.GetNode())
, AnnotationRole(*this)	// "AnnotationRole"
{
}


CimagingObservationType::CimagingObservationType(xercesc::DOMNode* const& node)
: TypeBase(node)
, ImagingObservation(*this)	// "ImagingObservation"
{
}

CimagingObservationType::CimagingObservationType(CimagingObservationType const& other)
: TypeBase(other.GetNode())
, ImagingObservation(*this)	// "ImagingObservation"
{
}


CmultiPointType::CmultiPointType(xercesc::DOMNode* const& node)
: TypeBase(node)
, MultiPoint(*this)	// "MultiPoint"
{
}

CmultiPointType::CmultiPointType(CmultiPointType const& other)
: TypeBase(other.GetNode())
, MultiPoint(*this)	// "MultiPoint"
{
}


namespace xs
{

CENTITIES::CENTITIES(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CENTITIES::CENTITIES(CENTITIES const& other)
: TypeBase(other.GetNode())
{
}


CENTITY::CENTITY(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CENTITY::CENTITY(CENTITY const& other)
: TypeBase(other.GetNode())
{
}


CID::CID(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CID::CID(CID const& other)
: TypeBase(other.GetNode())
{
}


CIDREF::CIDREF(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CIDREF::CIDREF(CIDREF const& other)
: TypeBase(other.GetNode())
{
}


CIDREFS::CIDREFS(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CIDREFS::CIDREFS(CIDREFS const& other)
: TypeBase(other.GetNode())
{
}


CNCName::CNCName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNCName::CNCName(CNCName const& other)
: TypeBase(other.GetNode())
{
}


CNMTOKEN::CNMTOKEN(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNMTOKEN::CNMTOKEN(CNMTOKEN const& other)
: TypeBase(other.GetNode())
{
}


CNMTOKENS::CNMTOKENS(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNMTOKENS::CNMTOKENS(CNMTOKENS const& other)
: TypeBase(other.GetNode())
{
}


CNOTATION::CNOTATION(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNOTATION::CNOTATION(CNOTATION const& other)
: TypeBase(other.GetNode())
{
}


CName::CName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CName::CName(CName const& other)
: TypeBase(other.GetNode())
{
}


CQName::CQName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CQName::CQName(CQName const& other)
: TypeBase(other.GetNode())
{
}


CanySimpleType::CanySimpleType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanySimpleType::CanySimpleType(CanySimpleType const& other)
: TypeBase(other.GetNode())
{
}


CanyType::CanyType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyType::CanyType(CanyType const& other)
: TypeBase(other.GetNode())
{
}

void CanyType::SetXsiType()
{
	XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
		_T("anyType"), _T("http://www.w3.org/2001/XMLSchema"));
}

CanyURI::CanyURI(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyURI::CanyURI(CanyURI const& other)
: TypeBase(other.GetNode())
{
}


Cbase64Binary::Cbase64Binary(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cbase64Binary::Cbase64Binary(Cbase64Binary const& other)
: TypeBase(other.GetNode())
{
}


Cboolean::Cboolean(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cboolean::Cboolean(Cboolean const& other)
: TypeBase(other.GetNode())
{
}


Cbyte::Cbyte(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cbyte::Cbyte(Cbyte const& other)
: TypeBase(other.GetNode())
{
}


Cdate::Cdate(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdate::Cdate(Cdate const& other)
: TypeBase(other.GetNode())
{
}


CdateTime::CdateTime(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CdateTime::CdateTime(CdateTime const& other)
: TypeBase(other.GetNode())
{
}


Cdecimal::Cdecimal(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdecimal::Cdecimal(Cdecimal const& other)
: TypeBase(other.GetNode())
{
}


Cdouble::Cdouble(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdouble::Cdouble(Cdouble const& other)
: TypeBase(other.GetNode())
{
}


Cduration::Cduration(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cduration::Cduration(Cduration const& other)
: TypeBase(other.GetNode())
{
}


Cfloat::Cfloat(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cfloat::Cfloat(Cfloat const& other)
: TypeBase(other.GetNode())
{
}


CgDay::CgDay(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgDay::CgDay(CgDay const& other)
: TypeBase(other.GetNode())
{
}


CgMonth::CgMonth(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgMonth::CgMonth(CgMonth const& other)
: TypeBase(other.GetNode())
{
}


CgMonthDay::CgMonthDay(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgMonthDay::CgMonthDay(CgMonthDay const& other)
: TypeBase(other.GetNode())
{
}


CgYear::CgYear(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgYear::CgYear(CgYear const& other)
: TypeBase(other.GetNode())
{
}


CgYearMonth::CgYearMonth(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgYearMonth::CgYearMonth(CgYearMonth const& other)
: TypeBase(other.GetNode())
{
}


ChexBinary::ChexBinary(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

ChexBinary::ChexBinary(ChexBinary const& other)
: TypeBase(other.GetNode())
{
}


Cint::Cint(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cint::Cint(Cint const& other)
: TypeBase(other.GetNode())
{
}


Cinteger::Cinteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cinteger::Cinteger(Cinteger const& other)
: TypeBase(other.GetNode())
{
}


Clanguage::Clanguage(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Clanguage::Clanguage(Clanguage const& other)
: TypeBase(other.GetNode())
{
}


Clong::Clong(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Clong::Clong(Clong const& other)
: TypeBase(other.GetNode())
{
}


CnegativeInteger::CnegativeInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnegativeInteger::CnegativeInteger(CnegativeInteger const& other)
: TypeBase(other.GetNode())
{
}


CnonNegativeInteger::CnonNegativeInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnonNegativeInteger::CnonNegativeInteger(CnonNegativeInteger const& other)
: TypeBase(other.GetNode())
{
}


CnonPositiveInteger::CnonPositiveInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnonPositiveInteger::CnonPositiveInteger(CnonPositiveInteger const& other)
: TypeBase(other.GetNode())
{
}


CnormalizedString::CnormalizedString(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnormalizedString::CnormalizedString(CnormalizedString const& other)
: TypeBase(other.GetNode())
{
}


CpositiveInteger::CpositiveInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CpositiveInteger::CpositiveInteger(CpositiveInteger const& other)
: TypeBase(other.GetNode())
{
}


Cshort::Cshort(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cshort::Cshort(Cshort const& other)
: TypeBase(other.GetNode())
{
}


Cstring::Cstring(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cstring::Cstring(Cstring const& other)
: TypeBase(other.GetNode())
{
}


Ctime::Ctime(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Ctime::Ctime(Ctime const& other)
: TypeBase(other.GetNode())
{
}


Ctoken::Ctoken(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Ctoken::Ctoken(Ctoken const& other)
: TypeBase(other.GetNode())
{
}


CunsignedByte::CunsignedByte(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedByte::CunsignedByte(CunsignedByte const& other)
: TypeBase(other.GetNode())
{
}


CunsignedInt::CunsignedInt(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedInt::CunsignedInt(CunsignedInt const& other)
: TypeBase(other.GetNode())
{
}


CunsignedLong::CunsignedLong(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedLong::CunsignedLong(CunsignedLong const& other)
: TypeBase(other.GetNode())
{
}


CunsignedShort::CunsignedShort(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedShort::CunsignedShort(CunsignedShort const& other)
: TypeBase(other.GetNode())
{
}


} // namespace xs


namespace xs
{

void CanyType::operator=(const string_type& value) {
	XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed, value);
}

CanyType::operator string_type() {
	return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed);
}

} // namespace xs


}